<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tools on Elizen</title>
    <link>https://elizen.me/tags/tools/</link>
    <description>Recent content in tools on Elizen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://elizen.me/tags/tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hi, NAS. Hi, Jellyfin!</title>
      <link>https://elizen.me/posts/2022/12/hi-nas.-hi-jellyfin/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://elizen.me/posts/2022/12/hi-nas.-hi-jellyfin/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/2022-12-01-senifeld.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;十一月大部分的时间都是居家办公，总算有了一点点时间鼓捣自己的小玩具。趁着双十一，买了一个绿联 NAS，我更愿意叫它「伪 NAS，假网盘」。不过也正是这些四不像的国产软件特性，让我心动。&lt;/p&gt;
&lt;p&gt;它主要解决了之前群晖无法解决的几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步全家人的照片。之前的群晖 App 不好用，同步速度巨慢。听说国产 NAS 的照片同步速度都非常快。&lt;/li&gt;
&lt;li&gt;Docker 应用。之前的群晖型号太老，跑 Docker 跑不动，新群晖硬件太拉胯，是在下不去手。目前没加 M.2 固态硬盘，跑了几个小应用，十分舒适。Jellyfin 就是其中之一。&lt;/li&gt;
&lt;li&gt;外网查看。这是一个非常具有国产特色的功能，它是通过绿联自己的服务器完成的，相当于系统层面直接做好了内网穿透。我因为家里网络布局的问题，之前的公网 IP 也一直用不起来，索性用绿联的集成 App，在外面当做一个私人百度网盘来用，看看视频，听听音乐，体验很好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他的一些特性暂时没什么用，比如时间机器备份电脑，百度网盘关联下载，都是些不痛不痒的功能。暂时看来，食之无味弃之可惜。索性，就让这台 NAS 老老实实做一个无存在感的家庭存储设备。&lt;/p&gt;
&lt;p&gt;二〇二二年十二月一日 记&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>得到电子书试用体验（5月31日更新）</title>
      <link>https://elizen.me/posts/2021/05/de-dao/</link>
      <pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://elizen.me/posts/2021/05/de-dao/</guid>
      <description>&lt;p&gt;开箱即用，只对自己负责的测评。（未完待续）&lt;/p&gt;
&lt;h3 id=&#34;5月31日更新&#34;&gt;5月31日更新&lt;/h3&gt;
&lt;p&gt;其实跟电子书关系不大，发现得到有个大坑啊，我正在读的一本书阅读器上下载到本地了，还是可以读，但是打开网页版发现它下架了，现在搞得笔记没有办法导出，而且我也不知道（也不敢尝试）如果我联网了，阅读器上的本地书籍会不会同步给我干掉。&lt;/p&gt;
&lt;p&gt;之前 Kindle 上买的书也有联网更新（其实就是删减部分片段）的情况出现，不知道得到怎么处理和解决。&lt;/p&gt;
&lt;p&gt;感觉买硬盘最靠谱，也应了那句老话，数据还是放在自己手里最安全。&lt;/p&gt;
&lt;h3 id=&#34;5月8日更新&#34;&gt;5月8日更新&lt;/h3&gt;
&lt;p&gt;最近一段时间一直在深度使用中，又有几个点值得聊一下。先说缺点：&lt;/p&gt;
&lt;p&gt;第一，电容笔到了，马上拿起来划线，误触率极高，它既然做到 7.8 寸的大小， 就应该想到误触率的问题，目前我几乎没办法把手压在屏幕上划线，只要碰到，就会触发翻页。之前用过 Pad，虽然不能这么比，但是使用感受上确实差了不少。&lt;/p&gt;
&lt;p&gt;第二，保护壳到了，一个字，带上了沉，今天送的皮套也到了，我还是准备裸奔+官方皮套了。壳的质感一般，而且带上去，又大了不少，实际作用只是多了两个侧边栏翻页按键，没什么真用途。&lt;/p&gt;
&lt;p&gt;第三，送了一张说是类纸膜，我也贴上了，但是那种磨砂感再加上误触，真的是无 Fuck 说。&lt;/p&gt;
&lt;p&gt;解决了几个问题，值得说一下。&lt;/p&gt;
&lt;p&gt;这几天更新了一次系统，用&lt;code&gt;（）&lt;/code&gt;画出的部分，可以直接变成横线了，刚用笔的时候我还在吐槽，哪个产品经理设计的，误触率这么高，竟然还要一行一行画。好在是更新的比较快。只是它的识别还不是太准确，而且变成划线需要等待的时间肉眼可见。软件体验上的问题，只能看看后续更新情况了。至少不是硬伤。&lt;/p&gt;
&lt;p&gt;传书的目录有了，在设置里，有一个本地文件管理，传进去的书可以直接用 Boox 本身的阅读器打开，这个阅读器怎么说呢，及格线吧，自定义程度高，但是要每一本书定义一次，而且到目前为止，我还是没用成功安装我喜欢的字体。&lt;/p&gt;
&lt;p&gt;优点也还是有的，该夸要夸。&lt;/p&gt;
&lt;p&gt;Boox 自带的这个阅读器，读 PDF 的文件，还是不错，自动的剪裁匹配，识别率非常好。这应该是 Boox 自家的本事。我其实是尽量不读 PDF 的，如果真的只能读 PDF，大概率会去买纸质书了。不过这一次，倒是读进去了。&lt;/p&gt;
&lt;p&gt;在得到阅读器上读完了一本止庵老师的《受命》，正在读老舍的《骆驼祥子》，都是和朋友聊起来，才想着读一读的。&lt;/p&gt;
&lt;p&gt;所有配件都到了，综合下来，我给 Kindle Voyage 定 10 分的话，我现在的 Kindle Oasis 1 代 8.5 分，得到阅读器，我会打 7.5 分。&lt;/p&gt;
&lt;h3 id=&#34;上午开箱-4-月-27-日&#34;&gt;上午开箱 (4 月 27 日)&lt;/h3&gt;
&lt;p&gt;新到的得到阅读器 Pro（不是发布会上的 Max，那个太大了，而且我发现那个是 200 多 PPI，就放弃了），开箱使用半小时，低于预期了。&lt;/p&gt;
&lt;p&gt;第一，屏幕边框的突起，以及手感，不如图片中显示的高级，也不如我手里的 Kindle Oasis 舒服。&lt;/p&gt;
&lt;p&gt;第二，300PPI 要在普通刷新模式下，才能发挥实力，但是普通刷新也没有 Kindle 的干脆利落，实际感受只能有 Kindle 刷新的八成左右的肉眼体感。很多地方会有一个加载中的过程，这个在 Android 软件里可能是给人一种等待的缓冲，但是在电子书上，就是一种延迟严重的残影。&lt;/p&gt;
&lt;p&gt;第三，如果使用传书功能，书只能在传书记录中找到，调用 Boox 自己的阅读器，没有其他任何优化，传书功能在我的颜值标准里，基本等于废掉了，也不会用了。&lt;/p&gt;
&lt;p&gt;以上，是我最关注的几个地方。笔还没到，没办法感受。另外，这个大小，说实话，可能对我还是有点儿大了。感觉底边框不用留那么大的。&lt;/p&gt;
&lt;p&gt;但是有一个优点要夸一下，如果你愿意，可以在阅读器里使用其他阅读软件，得到做的很开放。&lt;/p&gt;
&lt;h3 id=&#34;下午更新&#34;&gt;下午更新&lt;/h3&gt;
&lt;p&gt;用了一天，在实际阅读中另一个我很看重的地方是划线，目前体验也是没有 Kindle 好，不过习惯了一会儿，那种卡顿感也还能接受，不知道后续笔到了，会不会好一些。&lt;/p&gt;
&lt;p&gt;还有一个非常值得吐槽的细节，是我觉得阅读设计的逻辑问题，在阅读过程中，我可能会翻看之前的划线笔记，但是点过去之后，就找不到回到刚才阅读位置的地方了。点击返回，是回到书架位置，这个很不方便，不知道是我还没找到操作方法，还是设计上出现了问题。在纸质书阅读中，在一本书里翻来翻去是常有现象，回到当前阅读位置应该是一个标配才对。&lt;/p&gt;
&lt;p&gt;这一点，Mac 自带的 Books 是目前我用过的最好的，Kindle 也还可以。&lt;/p&gt;
&lt;p&gt;最后，带上壳，有些重了，保护壳的质感也不好。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>高颜值网易云播放器</title>
      <link>https://elizen.me/posts/2021/02/yesplaymusic/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://elizen.me/posts/2021/02/yesplaymusic/</guid>
      <description>&lt;p&gt;同志们，&lt;/p&gt;
&lt;p&gt;上车要快，废话少讲。&lt;/p&gt;
&lt;p&gt;废话，咱们还是讲两句吧。&lt;/p&gt;
&lt;p&gt;我一向自诩是个音乐虫子，听的歌不算正统，也没有多么偏门，基本也就是外国乡村，国内小众，部分硬核摇滚，还有点儿北欧现代。&lt;/p&gt;
&lt;p&gt;但是就这么点儿兴趣，已经被互联网给我撕得稀碎。最爱网易云音乐，但是版权少得可怜。听听逼哥吧，得去 Spotify 和 Apple Music 美区，听听郝云啊，大爱的 James Blunt 啊这些主流音乐，都还得再弄个 QQ 音乐。Spotify 倒是算全的，但是可惜了，最近发现逼哥的歌也下架了不少，又不符合我自己的使用习惯。就这么在网易云音乐和其他一切之间来回奔波，实在是奔波不动了。&lt;/p&gt;
&lt;p&gt;这不是昨天，有人在 TG 推荐了一个神器，马上搞下来看看，这一看不要紧，我耳机从早上带到现在，就没摘下来，原来那个味儿，它有点儿回来了。（别报希望听逼哥，对于逼哥，我山人另有妙计）&lt;/p&gt;
&lt;p&gt;好，废话结束，上图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-02-02-%E6%88%AA%E5%B1%8F2021-02-02%20%E4%B8%8A%E5%8D%8810.06.36.jpg&#34; alt=&#34;&#34;&gt;
播放器首页&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-02-02-%E6%88%AA%E5%B1%8F2021-02-02%20%E4%B8%8A%E5%8D%8810.06.30.jpg&#34; alt=&#34;&#34;&gt;
发现页&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-02-02-%E6%88%AA%E5%B1%8F2021-02-02%20%E4%B8%8A%E5%8D%8810.06.50.jpg&#34; alt=&#34;&#34;&gt;
个人主页&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-02-02-020614.jpg&#34; alt=&#34;&#34;&gt;
专辑页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-02-02-%E6%88%AA%E5%B1%8F2021-02-02%20%E4%B8%8A%E5%8D%8810.07.01.jpg&#34; alt=&#34;&#34;&gt;
歌词显示&lt;/p&gt;
&lt;p&gt;除了高颜值，重点来了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🔴 网易云账号登录&lt;/li&gt;
&lt;li&gt;📺 MV 播放&lt;/li&gt;
&lt;li&gt;📃 支持歌词显示&lt;/li&gt;
&lt;li&gt;🚫🤝 无任何社交功能&lt;/li&gt;
&lt;li&gt;🌎️ 海外用户可直接播放（需要登录网易云账号）&lt;/li&gt;
&lt;li&gt;🔐 支持 UnblockNeteaseMusic，自动使用 QQ/酷狗/酷我音源替换变灰歌曲链接 （网页版不支持）&lt;/li&gt;
&lt;li&gt;⏭️ 支持 MediaSession API，可以使用系统快捷键操作上一首下一首&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我最喜欢的是第四条和第六条，上面截图中，郝云的新专辑《艳阳高照》就是 Unblock 的，无缝切换到了别的播放源。&lt;/p&gt;
&lt;p&gt;还有其它一些特性，大家可以自行前往项目主页查看：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://github.com/qier222/YesPlayMusic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;祝好。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Hugo 从 0 到 1 搭建个人博客</title>
      <link>https://elizen.me/posts/2021/01/hugo-form-0-to-1/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://elizen.me/posts/2021/01/hugo-form-0-to-1/</guid>
      <description>&lt;p&gt;我喜欢一个关于知识分子的定义：&lt;strong&gt;他们是研究理念的，他们永远要站在一个制度的对立面。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这也是为什么我在信息爆炸的今天，依然推荐用 RSS 订阅的方式阅读新的信息，使用 Kindle 或者直接读纸质书，在独立博客发表文章，谨慎地使用抖音一类短视频服务。它们部分或全部地站在了当代社会的对立面。但在我看来，这却是回归到互联网本身的必经之路。&lt;/p&gt;
&lt;p&gt;再一次细数我十年来的独立博客历程已无必要，无非是单调的一个时间列表。过程中，倒总是包含一个关键词「折腾」。如同麦克卢汉所说的「媒介即信息」，我选择独立博客作为我的信息传播渠道，也就必须融入这一传播介质之中。所以，这也是一篇关于「折腾」的文章。&lt;/p&gt;
&lt;p&gt;在查阅多方资料，以及[木木哥]和其他朋友的帮助下，我 2020 年使用 Hugo 重新搭建了自己的博客网站。最近，我想如法炮制，用最快的速度给一个新入手的域名搭建网站，却发现「建站」这件事是一件典型的超低频操作，一次建站，除了爱折腾的人，对于大部分像我一样，只是寻找一个能舒舒服服写东西的地方的人来说，几年都不会有大的变动，所以当初对着电脑从 0 开始搭建出博客的过程，已忘到九霄云外。&lt;/p&gt;
&lt;p&gt;对此，就启发我要写下这样一篇文章，解决以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面对像我一样纯粹的技术小白能够傻瓜式的如法炮制&lt;/li&gt;
&lt;li&gt;搭建过程快速、简单、容易上手。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文也因此分为上、下两个章节，基础篇和进阶篇。今天先讲基础篇，使用 Github 搭建免费的 Hugo 个人网站。&lt;/p&gt;
&lt;p&gt;第一部分，基础版：使用 Github 搭建 Hugo 网站。&lt;/p&gt;
&lt;h2 id=&#34;1-注册-github-创建-repo-仓库&#34;&gt;1. 注册 Github，创建 repo 仓库&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Github 是全世界程序员的福音书，一个技术人不可能不知道的开源技术社区。我们就从这里开始，让它成为我们自己网站的第一个落脚点。&lt;/p&gt;
&lt;p&gt;注册 &lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt;，就像注册任何网站一样。进入 Github 网站，点击&lt;code&gt;Sing Up&lt;/code&gt;，输入自己的用户名、邮箱和密码，完成账户验证，点击&lt;code&gt;Create account&lt;/code&gt;，之后可以选择你的职业，你想用 Github 做什么，或者干脆跳过，直接下一步。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-01-19-%E6%88%AA%E5%B1%8F2021-01-11%20%E4%B8%8B%E5%8D%883.25.49.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;查收你的邮箱，点击确认链接，完成注册。&lt;/p&gt;
&lt;p&gt;点击右上角&lt;code&gt;+ - New repository&lt;/code&gt;，填写 &lt;code&gt;Repository name&lt;/code&gt;，点击&lt;code&gt;Create repository&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-01-19-%E6%88%AA%E5%B1%8F2021-01-11%20%E4%B8%8B%E5%8D%883.32.46.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;到此，Github 上的工作就已经完成了。你会得到如下图一些完全看不懂的东西。没关系，我们输入一个 &lt;code&gt;Repository name&lt;/code&gt; ，点击 &lt;code&gt;Create repository&lt;/code&gt; ，开始下一步。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-01-19-%E6%88%AA%E5%B1%8F2021-01-11%20%E4%B8%8B%E5%8D%883.34.45.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-安装-vs-code-和-git-开启折腾之旅&#34;&gt;2. 安装 VS Code 和 Git，开启折腾之旅&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;我们在本地的电脑上，还需要安装两个软件，一个是 Git，一个是 VS Code，Git 是一个版本控制系统，是我们连接 Github 的钥匙，而 VS Code 本身是微软出品的一款程序员使用的开发集成工具。我们不需要懂得这么多，只把它看成是我们的博客管理平台就可以了。&lt;/p&gt;
&lt;h3 id=&#34;2-1-安装-git&#34;&gt;2.1 安装 Git&lt;/h3&gt;
&lt;p&gt;去 Git [官网]下载，按照默认配置一直下一步，安装。&lt;/p&gt;
&lt;p&gt;安装完毕，打开桌面的快捷方式，我们需要现在本地创建一个 &lt;code&gt;ssh key&lt;/code&gt;，这个目的就是在你的电脑上生成一个密钥，获取之后，在 Github 上输入，就把你的电脑和 Github 连接起来，以后我们就可以在快速、方便地保存自己的本地文件到 Github 上，并生成网站内容。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//输入下面的代码，获取密钥（双引号内容为你自己注册账号时的邮箱）：
$ ssh-keygen -t rsa -C &amp;quot;email@xxx.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-01-19-adfb2beb6460de88d0c00bf4efeb6825.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在默认目录中找到 .ssh 中的 &lt;code&gt;id_rsa.pub&lt;/code&gt; 文件，打开，复制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-01-19-080547.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;回到浏览器中，进入 Github [设置] 中的 &lt;code&gt;SSH and GPG keys&lt;/code&gt;，新建一个 SSH keys，标题自己起，Key 的内容就输入刚才复制的文件中的值，然后添加。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2021/01/19/65a40ae3f1e02a1d937ca536b0639683.png?imageView2/2/w/1120/q/40/interlace/1/ignore-error/1&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;回到本地的 Git 窗口，输入如下代码，验证是否链接成功。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-01-19-ac71763f1851aed5961a68e561805837.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功之后，输入下面的代码，绑定自己的 Github 账号，到此，连接本地和 Github 的工作就完成了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global user.name &amp;quot;XXXX&amp;quot;
$ git config --global user.email &amp;quot;XXX@gmail.ocm&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-2-安装-vs-code&#34;&gt;2.2 安装 VS Code&lt;/h3&gt;
&lt;p&gt;点击进入 VS Code [官网]，选择自己的版本下载，我这里是 Mac 版本。如果安装不熟悉，就一路默认配置。安装完成，打开 VS Code 软件。点击&lt;code&gt;Extensions&lt;/code&gt;，安装所需插件。在这里也推荐几个必备和好用的插件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gpm&lt;/code&gt; 用来管理 Github 上的文件。 &lt;strong&gt;必备&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Setting Sync&lt;/code&gt; 同步 Github 与本地文件。 &lt;strong&gt;必备&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Markdown All in One&lt;/code&gt; 使用 Markdown 写作的利器。&lt;strong&gt;必备&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Chinese Language Pack for Visual Studio Code&lt;/code&gt; VS Code 的汉化插件。 &lt;strong&gt;推荐&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Auto Rename Tag&lt;/code&gt; 如果涉及修改代码的时候，非常好用。&lt;strong&gt;推荐&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Material Icon Theme&lt;/code&gt; 一套个性的图标主题。 &lt;strong&gt;推荐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-01-19-%E6%88%AA%E5%B1%8F2021-01-11%20%E4%B8%8B%E5%8D%884.00.07.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入 Github 选择刚才建立的 Repo，复制 HTTPS 链接，在 VS Code 中切换左侧边栏到 Project Management（项目管理）中，点击&lt;code&gt;+&lt;/code&gt;，粘贴地址，回车。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-01-19-%E6%88%AA%E5%B1%8F2021-01-11%20%E4%B8%8B%E5%8D%883.42.27.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;之后就可以在 gpm 中找到相应的 Github 项目。&lt;code&gt;右键&lt;/code&gt;点击你的项目名，选择在文件管理器中打开。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-01-19-%E6%88%AA%E5%B1%8F2021-01-11%20%E4%B8%8B%E5%8D%884.16.18.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-3-安装博客&#34;&gt;2.3 安装博客&lt;/h3&gt;
&lt;p&gt;点击[下载]（提取码: g5xe）我准备好的 &lt;code&gt;Blog&lt;/code&gt; 网站文件。将下载好的文件解压后，Copy 到项目文件夹。找不到本地文件夹，可以在文件管理器中右键自己的博客项目，选择打开目录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-01-19-%E6%88%AA%E5%B1%8F2021-01-11%20%E4%B8%8B%E5%8D%884.34.14.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;解压后的文件内容目录如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;├── archetypes
│   └── default.md
├── config.toml # Hugo 配置文件
├── content
│   └── posts # 文章目录
│       ├── hello-world.md
│       ├── hugo-single-link.md
│       └── huo-zha-le.md
├── static # 静态文件目录
│   ├── images
│   └── photos
│       └── 刘堃现场.jpeg
└── themes # 主题目录
    └── hyde
        ├── CHANGELOG.md
        ├── LICENSE.md
        ├── README.md
        ├── archetypes
        │   └── default.md
        ├── go.mod
        ├── images
        │   ├── screenshot.png
        │   └── tn.png
        ├── layouts
        │   ├── 404.html
        │   ├── _default
        │   │   ├── baseof.html
        │   │   ├── list.html
        │   │   ├── path.html
        │   │   ├── single.html
        │   │   └── terms.html
        │   ├── index.html
        │   ├── partials
        │   │   ├── comments.html
        │   │   ├── head.html
        │   │   ├── head_fonts.html
        │   │   ├── hook_head_end.html
        │   │   └── sidebar.html
        │   └── shortcodes
        │       ├── link.html
        │       └── music.html
        ├── static
        │   ├── Bmdb.min.css
        │   ├── Bmdb.min.js
        │   ├── apple-touch-icon-144-precomposed.png
        │   ├── css
        │   │   ├── hyde.css
        │   │   ├── poole.css
        │   │   ├── print.css
        │   │   └── syntax.css
        │   └── favicon.png
        └── theme.toml
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-4-配置博客&#34;&gt;2.4 配置博客&lt;/h3&gt;
&lt;p&gt;回到 VS Code，打开项目管理，右键自己的项目，选择在当前窗口打开或者新窗口打开。接下来，就可以进行修改了。Hugo 的基本配置都在 &lt;code&gt;config.toml&lt;/code&gt; 中，可以参考如下信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;baseURL = &amp;quot;&amp;lt;https://ittenblunt.github.io/my-blog/&amp;gt;&amp;quot; # 修改为自己的博客地址
languageCode = &amp;quot;zh-CN&amp;quot;
title = &amp;quot;Itten&#39;s Blog&amp;quot; # 修改“”中的内容为自己的网站名字
theme = &amp;quot;hyde&amp;quot; # 如果以后启用其它主题，在这里替换主题名字
disqusShortname = &amp;quot;&amp;quot; # 如果使用 disqus 评论系统，在这里填写自己的 disqus 用户名 
hasCJKLanguage = true
enableEmoji = true

[permalinks]
  posts = &amp;quot;/:filename/&amp;quot;

[Menus] # 边栏目录
  main = [
      {Name = &amp;quot;Archives&amp;quot;, URL = &amp;quot;&amp;lt;https://ittenblunt.github.io/my-blog/posts/&amp;gt;&amp;quot;},
      {Name = &amp;quot;Tags&amp;quot;, URL = &amp;quot;&amp;lt;https://ittenblunt.github.io/my-blog/tags/&amp;gt;&amp;quot;},
      {Name = &amp;quot;Photos&amp;quot;, URL = &amp;quot;&amp;lt;https://ittenblunt.github.io/my-blog/photos/&amp;gt;&amp;quot;}
  ]

[params] # 指定发布的文件目录和博客描述
  # dir name of your blog content (default is `content/posts`)
  contentTypeName = &amp;quot;posts&amp;quot;
  # description abou this website
  description = &amp;quot;There is only one thing in the world worse than being talked about, and that is not being talked about.&amp;quot;

[params.valine] # 我把它默认甚至为关闭了，想打开可以修改 false 为 true，填写 valine 的 appId 和 appKey 即可开启 valine 的评论系统。（目前 valine 好评在下降，很多人更换了自己的评论系统，我还没有折腾，暂时不提供这部分教程了。想用的可以参考 &amp;lt;https://valine.js.org/&amp;gt; 操作手册）
  enable = false
    appId = &#39;&#39;
    appKey = &#39;&#39;
    placeholder = &#39;既然来了，那就留个痕迹吧~&#39;
    visitor = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改之后，点击左侧边栏&lt;code&gt;源代码管理&lt;/code&gt;，在&lt;code&gt;消息&lt;/code&gt;框中随便输入，例如「updata my blog」，点击对勾。点击左下角master旁边的上传，之后可能会有弹窗，需要关联自己的 Github，在弹出的网页中同意关联即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-01-19-25104482c52d1285399248b0e2009173.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在，网页进入自己的 Github 项目，就会发现，我们本地文件已经全部上传好了，但它还不是最终的博客形态，Hugo 是需要进行编译才能产生静态网站页面的工具，这部分工作，在下一小节我们交给 Github 自动完成。&lt;/p&gt;
&lt;h2 id=&#34;3-配置-github-action-实现自动化部署&#34;&gt;3 配置 Github Action 实现自动化部署&lt;/h2&gt;
&lt;p&gt;我们在自己的项目中新建一个 gh-pages 分支。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-01-19-7fac456bfede80138188d94753e12de1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Setting 中设置 [Token]，暂存。Note 也是随便写，勾选 &lt;code&gt;repo&lt;/code&gt; 和 &lt;code&gt;workflow&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-01-19-%E6%88%AA%E5%B1%8F2021-01-12%20%E4%B8%8A%E5%8D%8811.13.15.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进项目 settings/secrets 新建标题为 &lt;code&gt;personal_token&lt;/code&gt; ，内容是刚创建的 tokens ;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-01-19-%E6%88%AA%E5%B1%8F2021-01-12%20%E4%B8%8A%E5%8D%8811.20.03.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回到项目，点击 &lt;code&gt;Action - Set up a workflow yourself&lt;/code&gt; 添加如下代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;	name: Deploy Hugo # 任君喜欢
	on:
	  push:
	branches:
	  - master   # master 更新触发
	jobs:
	  build-deploy:
	runs-on: ubuntu-18.04
	steps:
	  - uses: actions/checkout@v1
	
	  - name: Setup Hugo
	    uses: peaceiris/actions-hugo@v2
	    with:
	      hugo-version: latest
	
	  - name: Build 
	    run: hugo
	
	  - name: Deploy
	    uses: peaceiris/actions-gh-pages@v3
	    with:
	      personal_token: ${{ secrets.personal_token }} # 填写你自己的 personal_token
	      PUBLISH_BRANCH: gh-pages  # 推送到当前 gh-pages 分支
	      PUBLISH_DIR: ./public  # hugo 生成到 public 作为跟目录
	      commit_message: ${{ github.event.head_commit.message }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Commit 提交，看看 Action 是不是成功了，再看看 gh-pages 静态文件是否更新，到此，你的独立博客就算搭建成功了，为了方便，可以重新在 VS Code 中下载一遍自己的项目，保证它们的同步。现在可以访问你的博客地址，欣赏一下自己的成果了。&lt;/p&gt;
&lt;p&gt;如果你没有改动 &lt;code&gt;config.toml&lt;/code&gt; 文件的描述信息，打开它应该是下面这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2021-01-19-%E6%88%AA%E5%B1%8F2021-01-19%20%E4%B8%8A%E5%8D%8811.21.58.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在你就可以在本地的 &lt;code&gt;posts&lt;/code&gt; 目录下开始写作了。新建一个 &lt;code&gt;.md&lt;/code&gt; 格式的文件，填写下面的基本信息，开始博客之旅。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: 
date: 
tags: 
---
balabalabala...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;到此，大功告成。可以欢呼了。&lt;/p&gt;
&lt;h2 id=&#34;后话&#34;&gt;后话&lt;/h2&gt;
&lt;p&gt;基础篇到这里就结束了。后面会更新进阶篇，包括域名注册、DNS 解析、VPS 的购买和配置、通过 webhook 将 Github 内容自动拉取到自己的服务器等。&lt;/p&gt;
&lt;p&gt;俗话说，工欲善其事，必先利其器，搭建好了的小伙伴，就应该写起来了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>软件系列之Flomo</title>
      <link>https://elizen.me/posts/2020/12/flomo-app/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://elizen.me/posts/2020/12/flomo-app/</guid>
      <description>&lt;p&gt;120，36，84。&lt;/p&gt;
&lt;p&gt;现在我可以来聊一聊了。&lt;/p&gt;
&lt;p&gt;今年，我有很大一部分精力，分给了所谓的 PKM，也就是 Personal Knowledge Management，个人知识管理系统。简单来说，就是怎么记笔记。缘起我现在写作，已经很少是一本书一本书读下来，然后整理笔记，梳理成文，更多的，是从为什么开始。&lt;/p&gt;
&lt;p&gt;为什么德军在一战、二战中都是两线作战？&lt;/p&gt;
&lt;p&gt;为什么学生不喜欢学校？&lt;/p&gt;
&lt;p&gt;为什么农业社会不如采集社会抵抗自然灾害能力强，却依然从采集转向了农业？&lt;/p&gt;
&lt;p&gt;户籍制度和建设用地指标是如何阻碍社会发展？&lt;/p&gt;
&lt;p&gt;孩子如何思考、如何学习？&lt;/p&gt;
&lt;p&gt;这些问题不是某一本书可以给出答案的，它需要大量的阅读各种资料，书籍、论文、网络上搜索得来的信息。我需要做的，就是确定主题，持续跟踪，直到我对某一个为什么，足够了解，形成自己的判断。那么 OK，转向下一个。&lt;/p&gt;
&lt;p&gt;在这个过程中，也逐渐暴露出我自己一个很大的问题：关于资料的协同。我尝试过各种笔记软件，原始的文件夹流派（印象笔记、为知、OneNote），大纲/标签流派（Bear、Workflowy、幕布），到现在的数据库流派（Airtable、Notion），以及新兴起的网状思维流派（RoamResearch、Obsidian）。综合下来，各有所长，缺点也都明显。&lt;/p&gt;
&lt;p&gt;直到 &lt;a href=&#34;https://flomoapp.com/register2/?OTgx&#34;&gt;Flomo&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 出现，它就像量子跃迁，也像是金庸书里的某本秘籍，打通了人的任督二脉。这不是说它是独一至上的绝学，而是它将一切「过往」串联起来，打通了整个环节。没有人是从零开始的。&lt;/p&gt;
&lt;p&gt;关于此，我想再跑远点儿，多说几句。&lt;/p&gt;
&lt;p&gt;我在之前的&lt;a href=&#34;https://elizen.me/post/2020/11/%E7%AC%94%E8%AE%B0%E7%A9%B6%E7%AB%9F%E8%A6%81%E8%AE%B0%E4%BB%80%E4%B9%88/&#34;&gt;《笔记应该记什么》&lt;/a&gt;中提过我的观点：&lt;strong&gt;笔记首先要记一个好问题，一个钩子，而不是一个答案&lt;/strong&gt;。我们用印象笔记，收藏、收藏、收藏，却再也不看。用 Bear，用 Notion，用各种软件，写来写去，却发现需要一段材料的时候找到它很难。在信息时代，没有人可以靠熟读八股文走天下，就像麦克卢汉所说，我们创造了工具，而工具也在塑造我们。如今，更多时候是，我们看到了有用的信息，收藏起来，当需要使用它时，能够迅速找出来，引用。&lt;/p&gt;
&lt;p&gt;大部分，或者说绝大部分人，关注的是收藏-需要-寻找这一路径，但忽略了最关键的一个问题：有用。我认为这是几乎所有不断尝试各种工具，不断思考如何记笔记，不断推倒重来的人，最大的结症：我们陷入了工具的漩涡，渴望被工具塑造，却忘记了我们使用一款工具的目的。这不限于效率工具，它可以放之四海而皆准，我们追求某种事物，到头来发现，我们只是被这种事物驱赶着前行。大到资本，小到基因。&lt;/p&gt;
&lt;p&gt;回归主题，我想聊的就是有用。我们现在知识焦虑、信息焦虑、教育焦虑，各种焦虑层出不穷，一部分原因，是我们已经习惯或者被迫习惯了被信息推着走。每天都有花式热点，反转再反转，各种信息杂耍一般蹦到我们面前，你躲也躲不掉，它们都是算法精心设计出来的，就像是量身定做的痒痒挠，特别知道我们哪里痒，哪里痒就挠哪里。长此以往，我们已经不知道我们真正需要的是什么，我们只关心今天怎么还不来挠我。&lt;/p&gt;
&lt;p&gt;我们已经忘记了最初打开一个搜索引擎，想要找什么？真正对我们「有用」的东西，完全被淹没。所以，我们收藏再收藏，整理再整理，到了想用的时候，却早已不记得自己曾经收藏过。因为绝大多数的收藏，其实都是「无用」的。&lt;strong&gt;我们应该做的，是时刻关注我们真正关心的问题，给他们建立一个钩子&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;认知科学里有个必要难度理论，大意就是，你输入信息时越困难，提取的时候越容易。回想一下，你认认真真坐下来读一本难啃的书，记下笔记，和你在网络上快速浏览某一篇文章，记下来的东西，哪一个在事后回想起来更清晰。答案无疑是前者。&lt;/p&gt;
&lt;p&gt;所以关于 PKM，在我看来有两个重点：有用和钩子。寻找并记录那些真正对我们有用的东西，给它们建立一个钩子。这是开始记笔记前最需要思考清楚的问题。而用什么来记笔记，不是那么重要。&lt;/p&gt;
&lt;p&gt;我们的大脑可以同时关注/处理 4 个左右的事情，多了就乱了。而我们神奇的大脑还有一个叫做默认模式网络的东西，你可以把它理解成潜意识。什么时候这个默认模式网络工作呢？就是当你什么都不做的时候。我举一个例子你们就明白了，如果某段时间，你一直在思考一个问题，但是迟迟没有解决的办法，你可能搁置或者放弃了，但突然某一天，在一个不经意的时间段，你脑子里一下蹦出了答案。这就是默认模式网络在发挥作用。它是如何发挥作用的呢？有一派观点是说，你学习到的知识其实并没有忘记，只是储存在大脑深处的一个个小盒子里，如果你对一个问题持续关注，吸收了很多相关的知识，当你不再思考它们的时候，默认模式网络就开始在其中建立链接，直到你突然被某一个钩子叫醒，发现答案已经出现。&lt;/p&gt;
&lt;p&gt;这里涉及了关于工作记忆和长期记忆的一些知识，我就不赘述了。总结一下就是，如果我们有一直关注的（也就是真正对我们有用的）问题，只要我们持续输入相关的信息，给它建立一个钩子，那么这些信息就不会丢失，当我调用这个钩子的时候，所有与之有关的信息也就会出现，并很可能产生一些让人意想不到的联系。创意、创造，就由此而来。&lt;/p&gt;
&lt;p&gt;说了这么多，还有一个重要的问题，为什么要记笔记呢？搞这些 PKM 用来干嘛呢？&lt;/p&gt;
&lt;p&gt;我的答案是，它们能帮助我做决策。也能避免让我受到人云亦云的影响。&lt;/p&gt;
&lt;p&gt;举例来说，我今年很长时间都在关注北京的学区房问题。经过很多信息的收集、处理，它现在已经能相对很好的帮我做出一些购买决策。而这些决策，影响的是几百万资金的流向，它不是一件小事情，它还关系到整个家庭的资产配置、教育资源、宜居等等多个方面。可以说，这些决策会在未来几年十几年，严重影响我的生活。&lt;/p&gt;
&lt;p&gt;但是很不幸，我见到太多人记笔记，只是记笔记，应付一场考试，把书摘抄一遍写一篇读书笔记，仅此而已，更有甚者，不是记笔记，而是收藏笔记，几千篇笔记，连收藏的标准和主题都没有，以至于我完全不知道他在做什么。&lt;/p&gt;
&lt;p&gt;言归正传，我要强烈推荐的 Flomo，浮墨笔记，就是一个极好的用来解决有用和钩子问题的笔记工具。我不再过多介绍它，你们可以去它的官网查看它的说明。我只聊几点我使用它时，体验的到不可替代性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一，微信服务号输入。我们每天一半以上的手机使用时间，都在微信里，如果有任何临时的想法，就像发给一个朋友一条信息一样简单，就可以保存在 Flomo 里。便利性，可以说是其它任何笔记软件都没有的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二，每日回顾。如果你在学习某些知识，希望加深印象，可以针对这一标签，设置每天在固定时间回顾，微信就会推送给你一条随机的信息。就像背单词一样，你在不同的环境、场景下，调用不同感官多次重复，是背诵下来的最好办法，也是符合必要难度理论的学习方式。我就设置了每晚八点，推送给我「摘抄」和「读书」两个标签下的内容，推送的消息经常能和我的当下产生关联，让我有新的想法，新的思考。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三，随机漫步。这是可玩性非常高的一个功能，它会进行语义分析，把经常出现的一些词汇，随机展示出来，可能两个你自己都意识不到的信息，会突然产生关联，起发你一个新的洞见。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它还有很重要的批注、标签无限层级、API 等功能，可以创造出很多好玩的东西。&lt;/p&gt;
&lt;p&gt;当然，这篇文章就是「如何记笔记」这个钩子，在我脑子里持续很长时间之后，完成的一份答卷。同时还有的，是文章开头的三个数字，120，36，84。&lt;/p&gt;
&lt;p&gt;我在使用 Flomo 84 天的时间里，创建了 36 个标签，120 条笔记。有些我觉得有意思的，可以给大家参考，我有一个 #日子 的标签，专门记录一些小嘟嘟的事情，比如打卡了什么地方，出现了什么意外状况；一个 #Question 的标签，则是记一些我想要持续关注的话题；一个 #人物 的标签，关注一些我喜欢的人物信息。&lt;/p&gt;
&lt;p&gt;很多时候，不是我们知道的太少，而是我们想得不够多。&lt;/p&gt;
&lt;p&gt;这应该是我 2020 年最后一篇文章了，这么操蛋的一年，我一点也不会怀念它，也不想写总结系列了，只希望它快点过去。后疫情时代我们怎么能生活的更好一些，才是我接下来要关注的问题。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最后是一点儿番外篇，都摘自我用 Flomo 记录下来的笔记。&lt;/p&gt;
&lt;p&gt;读库的老六在年会上说道，「现在的这些小朋友，有没有做好十年规划，把十年细分到每一年，每一个季度，每一个月，每一周，给自己做最具体的安排，还是就在那儿干等十年，空耗十年？这里面都是很现实、很具体的问题。」&lt;/p&gt;
&lt;p&gt;同样，吴主任也提到了类似的问题：「人这一生就是西西弗斯往山上滚巨石，没有取得完满的那一刻。实现了某个目标之后，获得短暂的喜悦和成就感，但更多的是满足之后直面未来的茫然。实现目标之后的空虚感强烈程度与成就大小成正比。只有立即定下更高的目标才能缓解这种虚无感，简单说就是又有事做了。没完没了，直到死去。失败了呢，失败是常态且必然带来痛苦和沮丧，有些人会因此陷入自责，开始各种自我怀疑。」&lt;/p&gt;
&lt;p&gt;同样的，还有罗翔老师，他说「那时候也接触过很多“泡沫哲学”，比如：人生没有意义，没有绝对的对，也没有绝对的错，人要及时行乐。再比如：做人最重要的是开心嘛，只要我开心，我管你干吗呢？今天我们到处也充斥着这样的观念，年轻人依然以这种放纵来彰显自己的自由，但我觉得这恰恰表明我们是不自由的。在今天的时代节奏里，我们所获的知识比过去多多了，人也因而越来越不能确定方向，越来越虚无，因此我们就更需要有一种定见，在不断变迁的社会中、在不确定性中，寻找出一种相对确定的东西。」&lt;/p&gt;
&lt;p&gt;阿城在《脱腔》里是这么说的，「人生在有生之年，不妨多东张西望，拼命干，其实是浪费生命。商业竞争常常是盲目的，我们不妨有胆量闲一闲。」阿城也说过，当代人最大的问题，其实是无聊。&lt;/p&gt;
&lt;p&gt;我要是再往下追问，这种无聊从何而来？答案很可能与科技有关。科技创造了一个新的存在于虚无之中的「美丽新世界」。我们什么都不用做，就可以活的很好。在你不爽的时候，还有人给你索玛。&lt;/p&gt;
&lt;p&gt;而科技，正在大步流星地制造一种又一种索玛，以满足人们不断递增的无聊。与此同时，轴心时代的哲人们提出的问题，就随着索玛产生的快感，被迅速遗忘，直到没有人能再记起。&lt;/p&gt;
&lt;p&gt;这个世界越来越少的人能提出真正的问题。&lt;/p&gt;
&lt;p&gt;工欲善其事，必先利其器，如果这样一个工具，能让你在三五年的时间里，做出几个好的决策，深入几个自己感兴趣的领域，提出一些有趣的问题，那么，各美其美。&lt;/p&gt;
&lt;p&gt;愿你们每天开心。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;使用我的注册链接，你可以获得 14 天的 Pro 会员。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>日记可以怎么记</title>
      <link>https://elizen.me/posts/2020/11/%E6%97%A5%E8%AE%B0%E5%8F%AF%E4%BB%A5%E6%80%8E%E4%B9%88%E8%AE%B0/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://elizen.me/posts/2020/11/%E6%97%A5%E8%AE%B0%E5%8F%AF%E4%BB%A5%E6%80%8E%E4%B9%88%E8%AE%B0/</guid>
      <description>&lt;p&gt;接上文，&lt;a href=&#34;https://mp.weixin.qq.com/s/yZKr0uEWdyD45GicnmFraA&#34;&gt;笔记究竟要记些什么&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我这个随手记的重点既是随手，也是随机。今天是一篇番外，并不在原有的框架中，来聊一聊朋友在评论区问到的日记问题。这样的写法也是实践麦克卢汉的经典理论「&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AA%92%E4%BB%8B%E5%8D%B3%E6%98%AF%E8%A8%8A%E6%81%AF&#34;&gt;媒介即信息&lt;/a&gt;」。&lt;/p&gt;
&lt;p&gt;我在&lt;a href=&#34;https://mp.weixin.qq.com/s/yZKr0uEWdyD45GicnmFraA&#34;&gt;上文&lt;/a&gt;中提到过几种笔记形式，朋友觉得她记录的近似我说的日记，每天干了些什么，看起来像是一个个冷冰冰的答案。&lt;/p&gt;
&lt;p&gt;其实日记也可以很有趣，很有用。我举两个例子。&lt;/p&gt;
&lt;p&gt;第一，我们来说说鲁迅日记。&lt;/p&gt;
&lt;p&gt;我有一段时间，模仿鲁迅行文风格，写了一阵子日记。同时也对他的日记做了点儿研究，鲁迅日记都记些什么呢？研究结果部分如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记时间&lt;/li&gt;
&lt;li&gt;记旅程&lt;/li&gt;
&lt;li&gt;记朋友往来&lt;/li&gt;
&lt;li&gt;记购物&lt;/li&gt;
&lt;li&gt;记书信&lt;/li&gt;
&lt;li&gt;偶记天气&lt;/li&gt;
&lt;li&gt;记购书账&lt;/li&gt;
&lt;li&gt;记看戏&lt;/li&gt;
&lt;li&gt;记节日&lt;/li&gt;
&lt;li&gt;极少书评，皆简短&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;鲁迅日记向来以短著称，言简意赅，没有废话。这属于他自己的文学风格，和当时的白话文发展应该关系不大，因为同时期的郁达夫写日记就喜欢长篇大论。&lt;/p&gt;
&lt;p&gt;鲁迅日记里有两个值得说说的有趣地方，第一是人情往来，鲁迅对于请客吃饭、花销明细记得相当清楚。第二是购书，哪天，买了什么书，花了多少钱，也是非常仔细，而且每一年年末，鲁迅还会专门针对一年的购书，再记录一份详细清单。&lt;/p&gt;
&lt;p&gt;可以简单理解为，鲁迅日记的主要目的，就是用来回顾，回顾具体的生活事件。这一年，去了哪儿，见了谁，给谁写过信，看了什么戏，吃了谁请的饭，买书花了多少钱。结构清晰，重点明确，每一日的记录很简短，方便回顾。&lt;/p&gt;
&lt;p&gt;对比当代，可能鲁迅缺少的，就是一个 Excel 表或者一个统计软件。这对我最大的影响是，&lt;strong&gt;日记类型的笔记应该结构化，方便我们后续的回顾，也同时减少我们过度的发散。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第二，是曾国藩的日记，无数后人研究曾国藩，主要就是研究他的日记。我发现他的日记可以被概括为积极心理学。他在日记中不断打磨自己的想法，增进自己的认知，逐渐拥有了自己的智慧。&lt;/p&gt;
&lt;p&gt;这种正向迭代的「日记」，可以算作一种主题笔记。读书，修身，齐家，带兵，每日三省吾身，所有笔记不外乎探讨几个大主题，不跑题，不发散，长此以往，有收获，有帮助。每一篇日记，都是建立在过往的所有日记之上。&lt;/p&gt;
&lt;p&gt;在今天有一个派别，专门研习这种做法。像我在&lt;a href=&#34;https://mp.weixin.qq.com/s/wSJ_PILrjlLAZky0SFiRig&#34;&gt;一个好用的笔记系统&lt;/a&gt;中提到的 &lt;a href=&#34;http://roamresearch.com/&#34;&gt;Roam&lt;/a&gt;就是其中翘楚，也是这个领域的革命者。这一派主张不要弄什么分类、层级、标签了，我们就用「钩子」。而承载这个钩子的，就是日记，或者改用当代流行说法，Daily Notes。&lt;/p&gt;
&lt;p&gt;可是现实中有一个问题，我们的信息过载太严重了，每天被各种信息轰炸，如何保证自己不喜新厌旧，不见异思迁呢？没有办法。但是 Roam 提供了一种可能，这需要我们像曾国藩一样，明确自己的大主题，围绕着这些大的主题，我们可以放开了记，最后这些杂乱笔记所形成的网络，由 Roam 负责组织，恰好就像鲁迅日记一样，最终呈现给我们&lt;strong&gt;一种高度结构化的，对我们记录的「已知」和我们已经记录却未曾思考过的「未知」的一种杂交&lt;/strong&gt;。已知到未知再到新知，让我们逐渐拥有自己的智慧。&lt;/p&gt;
&lt;p&gt;为了更明确这一派的设计逻辑，我简单用 Roam 做个示范。当你打开 Roam，它会自动建立一个以当天日期为标题的 Daily Notes，且标题不可更改。你所有的记录，都在这一页空白纸上。剩下的，就是放开了记。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2020-11-13-031245.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;放开了记，就有一个问题，我今天记自己吃了什么，明天记自己去了哪儿，后天什么都没记，日子久了，这日记就没什么回顾意义了。而 Roam 中最让人激动的功能，双向链接，它恰好解决这一问题，它就是从曾国藩日记到鲁迅日记的钩子，让笔记有了从思考到结构化的可能。怎么做呢？&lt;/p&gt;
&lt;p&gt;上图中就是一个例子。每一个在 Roam 中被&lt;code&gt;[[]]&lt;/code&gt;标记出来的文本，自动变成一个新页面，我用它来结构化我的日记，以达到类似鲁迅日记的回顾功能。其中，&lt;code&gt;[[Morning Page]]&lt;/code&gt;中，我会问自己几个问题，比如今天情绪怎么样，有哪些怕自己忘掉的事儿，&lt;code&gt;[[MIT 3]]&lt;/code&gt;是我从一位博主那里学来的，简单来说，就是记录下一天中最重要的三件事，&lt;code&gt;[[Daily]]&lt;/code&gt;就是纯碎的流水账了，一天下来，我再回头看一看，有哪些有意思的地方，将它用&lt;code&gt;[[]]&lt;/code&gt;标记出来，简单打个标签，作为后面的某一个主题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.elizen.me/img/2020-11-13-roamresearch.com_%20-4-.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;剩下的事儿，就交给 Roam 了。比如我简单汇总了一个读书页面，在记录时候加上一个标签，甚至不加标签，点击这个 Books 页面回顾时会看到我哪天读了什么。点击任何一本书的标题，就是一个新的页面，书摘、笔记随意写在里面，相互引用的内容也不需要复制文本，只需要把某一段落的唯一标识引用到需要的地方就可以了，还能同时看见某一句重要的话，在哪里被我引用，引用了多少次。这对于构建自己的知识体系，是一个跃迁式提升。&lt;/p&gt;
&lt;p&gt;说了这么多，总结一下，在当代，&lt;strong&gt;日记可以通过某种形式建立起一种既有结构化（鲁迅日记）又有主题性（曾国藩日记）的笔记系统，这种笔记系统可以方便我们回顾，在笔记间产生关联，形成联想，从而达到已知和未知的杂交，发现新知，拥有智慧。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Roam 是这方面的一个好工具，但更重要的是，我们要先明确自己的理念，建立可操作的系统。切记，工具的作用只是锦上添花，事半功倍。&lt;/p&gt;
&lt;p&gt;先写到这，后面继续补充。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>笔记究竟要记什么</title>
      <link>https://elizen.me/posts/2020/11/%E7%AC%94%E8%AE%B0%E7%A9%B6%E7%AB%9F%E8%A6%81%E8%AE%B0%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://elizen.me/posts/2020/11/%E7%AC%94%E8%AE%B0%E7%A9%B6%E7%AB%9F%E8%A6%81%E8%AE%B0%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;接上文，&lt;a href=&#34;https://www.notion.so/2-2-2f04da2bd5554c02aa5b7935482c4d1d&#34;&gt;一个好用的笔记系统&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们先抛开一切笔记工具，来谈谈笔记究竟在记些什么。&lt;/p&gt;
&lt;p&gt;学生阶段略过不谈，学生更应该记一个错题本，而不是长篇大论的板书和重点。&lt;/p&gt;
&lt;p&gt;大家记笔记用来做学问，比如钱锺书；大作家记笔记以创造新作品，例如纳博科夫；还有一些人，不记笔记，记日记，为了回顾和回忆，像是鲁迅的日记（当然，对于专门的研究项目鲁迅会整理大量资料，应属于做学问）。&lt;/p&gt;
&lt;p&gt;谈论一个好用的笔记系统，更多人当然希望做前两者，笔记中记录经验、信息，以便未来可以复用、可以创新、可以联想和旁征博引，目的，是为了&lt;strong&gt;解决问题&lt;/strong&gt;。所以，关于笔记究竟要记什么，我的观点是：&lt;strong&gt;笔记首先要用来记一个好问题，一个钩子，而不是一个答案。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也就是我上文所提到的，知识体系应该是自上而下还是自下而上。按照我的观点，记笔记应该是自下而上的。比起笔记本里收藏的各类美食菜谱，我会倾向于记一句“如何做松鼠桂鱼”。前者是信息、是&lt;strong&gt;很多问题的答案&lt;/strong&gt;，而后者却是&lt;strong&gt;我们自发提出的一个问题&lt;/strong&gt;。它会成为&lt;a href=&#34;https://book.douban.com/review/10113755/&#34;&gt;一个钩子&lt;/a&gt;，引导我们一步一步去解决问题，如何判断一条鱼的好坏，如何处理一条鱼，如何使用刀具，如何选择配料，直到如何做出一盘松鼠桂鱼。&lt;/p&gt;
&lt;p&gt;通过这种自下而上，我们最终形成的知识体系，将会是“如何做出一桌好吃的饭”，它恰好指向了我们原本收藏的各类美食菜谱，到那时，笔记本里收藏的这些菜谱，才有了它存在的真正价值。它可以作为一份参考，在我们不断的实践过程中提供一些恰到好处的建议。否则，让我们审视一下自己现有的笔记系统，那些曾经随手收藏的内容，我们打开过几次，又反复研读过几回呢？它们只是一个个冷冰冰的答案，甚至我们都不曾为这些答案提出过合理的问题。&lt;/p&gt;
&lt;p&gt;人们常说，笔记应该是我们的外脑，第二大脑，帮助我们更好的思考。但如今人们的笔记更多只是一个收藏夹，一个随意把东西丢进去却很少打开看一看的抽屉。这样的抽屉因为科技发展，成本近乎为零，没有成本，没有负担，容易满足人的欲望，却恰好背离了大脑的运作机制：&lt;a href=&#34;https://en.wikipedia.org/wiki/Desirable_difficulty&#34;&gt;必要难度理论&lt;/a&gt;。这样的抽屉也就变成了一座孤城，一个荒岛。&lt;/p&gt;
&lt;p&gt;先写到这，后面继续补充。欢迎讨论。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一个好用的笔记系统</title>
      <link>https://elizen.me/posts/2020/11/%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://elizen.me/posts/2020/11/%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/</guid>
      <description>&lt;p&gt;推荐一个好用的笔记系统 &lt;a href=&#34;https://www.notion.so/&#34;&gt;Notion&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;它可以说是革新了笔记产品这个行业，当然，在它之后还有一个叫 &lt;a href=&#34;https://roamresearch.com/&#34;&gt;Roam&lt;/a&gt; 的后起之秀，从另一个层面上改变了整个行业。&lt;/p&gt;
&lt;p&gt;它们都有一定的科学背书，但在我看来，很多人对于记笔记这件事，首先是给予笔记系统的权重不够，俗话说，给他们的时间不够多，一个人如果一天中有两个小时在自己的笔记系统中打磨自己的知识库，我相信不论是 Notion 还是 Roam 都能创新一个人的思维。&lt;/p&gt;
&lt;p&gt;记笔记有一个好处，很多时候我们以为自己懂了，但下笔的时候便会发现，思维常常跳脱，理解的东西没办法准确输出，这就是问题所在，基底没有打好的前提下，质变谈何容易。所以先给自己的笔记系统足够的沉浸时间，泡在这个环境里，等到规模效应出现，再谈论其它。那个时候，什么样的工具，便只是辅助，真正的精华已经在自己的脑子里。&lt;/p&gt;
&lt;p&gt;但是一个好的笔记系统，可以让这件事事半功倍，Notion 就是一个不错的选择。它有足够的结构化和灵活性，而且很多时候只有想不到，并不是它做不到。这就讲到第二点，知识体系是自上而下还是自下而上。市面上大多数笔记软件，重结构，轻便利，但是 Notion 这方面已经足够成熟。&lt;/p&gt;
&lt;p&gt;先写到这，后面再慢慢补充。&lt;/p&gt;
&lt;p&gt;我第一次关注到冥想是从赫拉利的书中了解到他每天都花几个小时冥想，而达里奥的书又一次提到了冥想。我至今也真正没付诸实践（我强烈怀疑我会睡着，因为我闭着眼睛集中精神入睡非常快），但我感觉写东西对我而言也是一种弱一些的冥想替代方式。做饭和写作是少数我能几乎完全掌控自己思维和注意力的事情。其实也不一定要正儿八经写作，有时候甚至我在回帖或回邮件或写代码时，突然就会冒出一个绝妙的主意。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>我的数字生活进阶-001</title>
      <link>https://elizen.me/posts/2020/03/%E6%88%91%E7%9A%84%E6%95%B0%E5%AD%97%E7%94%9F%E6%B4%BB%E8%BF%9B%E9%98%B6-001/</link>
      <pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://elizen.me/posts/2020/03/%E6%88%91%E7%9A%84%E6%95%B0%E5%AD%97%E7%94%9F%E6%B4%BB%E8%BF%9B%E9%98%B6-001/</guid>
      <description>&lt;h3 id=&#34;01-超强大的-roam-research&#34;&gt;01. 超强大的 Roam Research&lt;/h3&gt;
&lt;p&gt;最近发现了一款软件，Roam Research，可以简单理解为幕布的特高级版本，最重要的是它能实现双向链接，以及从笔记生成类似神经网络一样的视图。对于扩展自己的信息，所谓的用已有的「A」+ 已有的「B」，创造出全新的「C」，这款软件可以说是目前我见到的最上乘的应用。&lt;/p&gt;
&lt;p&gt;但我尝试之后，暂停了下来。不是它不够好，而是以我目前的需求，我觉得自己驾驭不了它，有兴趣，或者想要挑战一下的朋友可以尝试，下方是它的官方链接。目前仅有 Web 版本。不过这是一款很有门槛的软件。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://roamresearch.com/&#34;&gt;Roam Research&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;02-notion-与石墨文档&#34;&gt;02. Notion 与石墨文档&lt;/h3&gt;
&lt;p&gt;纯 Web 的笔记类软件，我目前只使用 Notion 和石墨文档。&lt;/p&gt;
&lt;p&gt;Notion 也是一款被吹捧为 All in One 的软件，但对我来说，它最强大的地方在于无码构建数据库。如果你也像我一样，长期对独立博客感兴趣，会发现一个有趣的现象，现在的博客都在追求纯静态化，古老的 WordPress 一样的需要用数据库来记录的博客已经没落许多，但笔记应用，却纷纷「模块化」、「数据库」起来。很大一个原因是，知识是需要结构化的，需要相互关联的，链接越紧密，在调用的时候能掌握的信息密度就越大，越有可能创造价值。而博客则不然，文章与文章是独立的，关联很小的。所以造成了现在的状况。&lt;/p&gt;
&lt;p&gt;我使用石墨文档，只有两个用处，一是完成副业「极客时间」的编辑工作，他们的小伙伴使用石墨文档进行在线协同办公（其实我特别想要常识一下飞书，据说非常舒服）；第二就是工作中需要进行微信群内表单统计工作的时候，会使用石墨文档，它直接关联生成 Excel，后期处理起来方便很多。&lt;/p&gt;
&lt;p&gt;而 Notion 我一口气白嫖了 50 年的使用权，我觉得它能完成的工作非常多，甚至有很多是我们根本意识不到的。我目前在用它集中处理一些在线课堂的学习笔记，以及个人的电影和读书记录，因为它的数据库结构化，可以很好的链接作者、导演、百科等等方面的内容。也是非常好用。&lt;/p&gt;
&lt;h3 id=&#34;03-印象笔记与-ulysses&#34;&gt;03. 印象笔记与 Ulysses&lt;/h3&gt;
&lt;p&gt;作为本地笔记软件，印象笔记的插件之全面，还是目前任何平台都无法比拟的。对于需要后续处理、归档、查阅的内容，我都会集中保存在印象笔记中。它最近新开发的一众功能除了桌面便签，在我看来，都是鸡肋，没有真正解决它的瓶颈问题。而它也在开发类似 Notion 的模块化 Web 端笔记页面，我试用了一下，属于治标不治本。在我使用的过程中，印象笔记一直是作为一个外脑存在的，在这方面，它只要守得住底线，我就不会抛弃转向其它同类型的软件。国外也有很多笔记达人，很好地实现了在印象笔记中的 All in One，不过我还是坚持术业有专攻。&lt;/p&gt;
&lt;p&gt;最近一直在打磨自己的写作流程，才决定彻底抛弃 Bear，回归 Ulysses。Bear 强大的颜值一度让我痴迷，但是它在写作过程中又始终在俏皮的边缘，无法让人静下来，文字都跟着不正经起来。Ulysses 则不然，每次打开它，都让人正襟危坐，生怕对不起键盘敲出的字来。而且，目前我也整在 Ulysses 上打造一套标准化的写作流程。初见模型，希望它能更好的和印象笔记联动起来。&lt;/p&gt;
&lt;h3 id=&#34;04-devonthink&#34;&gt;04. Devonthink&lt;/h3&gt;
&lt;p&gt;Mac 上神一般存在的软件，但我只用了它极少的功能，作为在处理工作文件过程中的补充。它的强大指可以让很多人抛弃印象笔记，但我觉得没有必要，而且我不建议用它来处理纯粹的网页剪藏的内容，它的保留文档的方式，有些过于原始化了。&lt;/p&gt;
&lt;p&gt;最后一个建议，在软件的使用上，谨记：如无必要，勿增实体。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>